"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class App {
    loaders;
    components;
    eventStore;
    context;
    constructor(components = {}) {
        this.loaders = new Map();
        this.components = new Map();
        this.eventStore = App.createEventStore();
        this.context = {
            app: this,
            dispatchEvent: this.eventStore.dispatch,
            useEventHistory: this.eventStore.history,
        };
        this.add(components);
    }
    static createEventStore() {
        const list = new Array();
        return {
            list,
            dispatch: (type, payload) => {
                list.push([type.toString(), payload]);
                document.dispatchEvent(new CustomEvent(type.toString(), { detail: payload }));
            },
            history: (fn, filter) => {
                const events = filter
                    ? list.filter(([event]) => Array.isArray(filter) ? filter.includes(event) : filter === event)
                    : list;
                fn(events);
            },
        };
    }
    static createHook() {
        const list = new Array();
        return {
            list,
            addListener(fn) {
                list.push(fn);
            },
            run() {
                list.forEach((fn) => fn());
            },
        };
    }
    getComponentContext({ mounted, triggered }) {
        return {
            ...this.context,
            onTriggered: triggered.addListener,
            onMounted: mounted.addListener,
        };
    }
    createComponent(element, args) {
        const mounted = App.createHook();
        const triggered = App.createHook();
        const context = this.getComponentContext({ mounted, triggered });
        this.components.set(element, 'created');
        if (Array.isArray(args)) {
            const events = Array.isArray(args[0]) ? args[0] : [args[0]];
            const component = args[1];
            const mountComponent = async () => {
                if (this.components.get(element) === 'created') {
                    (await component()).default(element, context);
                    this.components.set(element, 'mounted');
                    mounted.run();
                }
                triggered.run();
            };
            const executeCustomLoader = (event) => {
                if (typeof event === 'function') {
                    event({ node: element, ...context }, mountComponent);
                }
                else {
                    element.addEventListener(event, mountComponent);
                }
            };
            events.forEach(executeCustomLoader);
        }
        else {
            args(element, context);
            this.components.set(element, 'mounted');
            mounted.run();
            triggered.run();
        }
    }
    add(components = {}) {
        Object.keys(components).forEach((key) => {
            const component = components[key];
            if (component) {
                this.loaders.set(key, component);
            }
        });
    }
    mount(root = document) {
        const elements = root.querySelectorAll('[data-component]');
        elements.forEach(async (element) => {
            // Check if component is already mounted
            if (this.components.has(element)) {
                return;
            }
            // Check if loader exists
            const loader = this.loaders.get(element.dataset.component);
            if (!loader) {
                return;
            }
            this.createComponent(element, loader);
        });
    }
}
exports.default = App;
//# sourceMappingURL=app.js.map